{"name":"TSM","tagline":"Typescript module compiler","body":"# TypeScript Module Compiler\r\n\r\n## What is it?\r\n\r\n`tsmc` is a [TypeScript](http://typescriptlang.org) module compiler. It's a tool to tackle complexity of large apps allowing you to define the app's modules and have them compiled and agregated into supermodules at your will.\r\n\r\n## What problem does it solve?\r\n\r\nIf all your typescrit files are in the same project on VS, you have two options: \r\neither compile each `ts` file to a `js` file or bundle everyhing in a single javascript. There is no middle ground.\r\nIt does not matter if you are using internal or external modules, and the same goes for manual compilation, you either\r\nset `--out` or `--out-dir`.\r\n\r\n## Why should I use it?\r\n\r\nPersonally, I hate when I have to load a bunch of stuff I'm not going to use. \r\nSo, if you have a medium to large sized app or library, please, break it down by modules so your users can get **only**\r\nwhat they want. Of course, a have-it-all package is also handy sometimes. If you decide to do that,\r\nthen `tsmc` is the right tool for the job.\r\n\r\n## How does `tsmc` help me?\r\n\r\n`tsmc` allows you to configure multiple module definitions (which will work as compilation targets) to generate \r\ndiferent combinations of your source code.\r\n\r\nAs an example, lets say you are creating a component based javascript framework, and you have the following \r\nmodule structure:\r\n\r\n    AwesomeJS\r\n      - ui\r\n        - modals\r\n        - carousel\r\n        - menu\r\n      - data\r\n        - rest\r\n        - binding\r\n      - ajax\r\n\r\nNow, let's say you want every submodule available separately, as well as each namespace and a package \r\nwith your entire framework. The following `tsmc` config would give it you:\r\n\r\n    {\r\n      \"name\": \"awesomejs\"\r\n      \"moduleRoot\": \".\"\r\n      \"submodules\": {\r\n        \"ui\": {\r\n          \"name\": \"awesomejs-ui\",\r\n          \"moduleRoot\": \"ui\",\r\n          \"submodules\": {\r\n            \"modals\": \"modals/module.tsm\",\r\n            \"carousel\": \"carousel/module.tsm\",\r\n            \"menu\": \"menu/module.tsm\"\r\n          }\r\n        },\r\n        \"data\": {\r\n          \"name\": \"awesomejs-data\",\r\n          \"moduleRoot\": \"data\",\r\n          \"submodules\": {\r\n            \"rest\": \"rest/module.tsm\",\r\n            \"binding\": \"binding/module.tsm\",\r\n          }\r\n        },\r\n        \"awesomejs-ajax\": \"ajax/module.tsm\"\r\n      }\r\n    }\r\n\r\nThat will generate the following files:\r\n  \r\n  - awesomejs-ui.js\r\n  - awesomejs-ui-modals.js \r\n  - awesomejs-ui-carousel.js \r\n  - awesomejs-ui-menu.js \r\n  - awesomejs-data.js\r\n  - awesomejs-data-rest.js\r\n  - awesomejs-data-binding.js\r\n  - awesomejs-ajax.js\r\n  - awesomejs.js\r\n\r\n<div class='flash alert alert-info'>\r\n  <strong>Note:</strong>\r\n  For each of those files, you'll also get a declaration (.d.ts) file and a sourcemap (.js.map) file.\r\n</div>\r\n\r\n## I want it, so what do I do now?\r\n\r\nCheck out the [Quick Start](https://github.com/theblacksmith/tsmc/wiki/Quick-Start) to see how to get it working on your project.\r\n","google":"UA-37446627-4","note":"Don't delete this file! It's used internally to help with page regeneration."}